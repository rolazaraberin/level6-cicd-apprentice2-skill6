"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const utilityFunctions_1=require("../utils/utilityFunctions"),nodeUtils_1=require("../utils/nodeUtils"),database_1=require("../models/database"),dbToken={invalidate:invalidate,getNew:getNew,save:save};async function invalidate(email){const emailHash=undefined,table="login",columnsToValues={token:""},columnsMatchValues={emailHash:(0,nodeUtils_1.hash)(email)},data=await database_1.knex.table(table).update(columnsToValues).where(columnsMatchValues),{affectedRows:affectedRows}=data;if(affectedRows||data)return affectedRows||data;throw new Error("ERROR: Invalid account")}function getNew(email){const token=undefined;return(0,nodeUtils_1.hash)(email+(0,utilityFunctions_1.generateKey)())}async function save(email,token){const emailHash=(0,nodeUtils_1.hash)(email),table="login",columns=undefined,values=undefined,target=undefined,match=undefined,columnsToValues={token:token},columnsMatchValues={emailHash:emailHash},sql=`UPDATE ${table} SET ${["token"]} = ${(0,utilityFunctions_1.quoteValues)([token])} WHERE ${"emailHash"} = ${(0,utilityFunctions_1.quoteValues)([emailHash])}`,result=undefined;return await database_1.knex.table(table).update(columnsToValues).where(columnsMatchValues)}exports.default=dbToken;