"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const testUtils_1=require("./testUtils"),userUtils_1=require("./userUtils");jest.setTimeout(25e4),describe("deleteUserById",(()=>{test("Given an id, it deletes a user",(async()=>{const{user:user,userId:userId}=await(0,testUtils_1.getValidTemporaryCredentials)();await(0,testUtils_1.removeUserForeignKeyConstraints)(user),await(0,userUtils_1.deleteUserById)(userId);const result=await(0,userUtils_1.getUserById)(userId);expect(result).not.toBeDefined()}))})),describe("createUserByEmail",(()=>{test("Given an email, it creates a user",(async()=>{const{email:email}=await(0,testUtils_1.getUnusedTemporaryCredentials)(),user=await(0,userUtils_1.createUserByEmail)(email),result=await(0,userUtils_1.getUserById)(user.id);await(0,testUtils_1.removeUserForeignKeyConstraints)(user),await(0,userUtils_1.deleteUserById)(user.id),expect(result.email).toBe(email)}))})),describe("getUserByPassword",(()=>{test("Given correct email and password, it returns a user",(async()=>{const{email:email,password:password}=await(0,testUtils_1.getValidCredentials)(),user=await(0,userUtils_1.getUserByPassword)(email,password);expect(user.email).toBe(email)})),test("Given wrong email and password, it returns nothing",(async()=>{const email="wrong@email.com",password="wrong password",user=(0,userUtils_1.getUserByPassword)(email,password);await expect(user).rejects.toBeDefined()}))})),describe("getUserByToken",(()=>{test("Given correct email and token, it returns a user",(async()=>{const{email:email,token:token}=await(0,testUtils_1.getValidCredentials)(),result=await(0,userUtils_1.getUserByToken)(email,token);expect(result.email).toBe(email)})),test("Given no email, it throws an error",(async()=>{const{token:token}=await(0,testUtils_1.getValidCredentials)();let noEmail,result;noEmail="",result=(0,userUtils_1.getUserByToken)(noEmail,token),await expect(result).rejects.toBeDefined(),noEmail=void 0,result=(0,userUtils_1.getUserByToken)(noEmail,token),await expect(result).rejects.toBeDefined(),noEmail=null,result=(0,userUtils_1.getUserByToken)(noEmail,token),await expect(result).rejects.toBeDefined(),noEmail={},result=(0,userUtils_1.getUserByToken)(noEmail,token),await expect(result).rejects.toBeDefined(),noEmail=[],result=(0,userUtils_1.getUserByToken)(noEmail,token),await expect(result).rejects.toBeDefined()}))})),describe("getUserById",(()=>{test("Given a valid id, it returns a user",(async()=>{const{userId:userId}=await(0,testUtils_1.getValidCredentials)(),user=await(0,userUtils_1.getUserById)(userId),result=Number(user.id);expect(result).toBe(userId)})),test("Given invalid id, it returns nothing",(async()=>{const id=-1,user=await(0,userUtils_1.getUserById)(-1);expect(user).toBeFalsy()}))}));