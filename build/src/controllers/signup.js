"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const database_1=require("../models/database"),utilityFunctions_1=require("../utils/utilityFunctions"),nodeUtils_1=require("../utils/nodeUtils"),sendEmail_1=__importDefault(require("./sendEmail")),Login_1=__importDefault(require("../models/entities/Login")),dotenv_1=__importDefault(require("dotenv")),accountUtils_1=require("./accountUtils"),cartUtils_1=require("./cartUtils"),errorUtils_1=require("../utils/errorUtils"),signup={withPassword:withPassword};exports.default=signup,dotenv_1.default.config();const disableEmails=process.env.disableEmails;async function withPassword(request,response,_next){try{const{email:email,password:password}=request.body;await validate(email);const{user:user}=await(0,accountUtils_1.createAccountByPassword)(email,password),cart=await(0,cartUtils_1.getCartByUser)(user);response.status(200).send({user:user,cart:cart}),"true"!==disableEmails&&sendEmail_1.default.signupConfirmation(email)}catch(asyncError){const{error:error,code:code,message:message}=await(0,errorUtils_1.handleAsyncError)(asyncError);response.status(code).send(message)}}async function validate(email){const emailHash=undefined,columnsMatchValues={emailHash:(0,nodeUtils_1.hash)(email)},data=await database_1.typeorm.manager.getRepository(Login_1.default).findOne({where:columnsMatchValues});if((0,utilityFunctions_1.isEmpty)(data))return"Email validated";{const error=new Error("ERROR: Account already exists");throw error.code=409,error}}