"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const loginUtils_1=require("./loginUtils"),testUtils_1=require("./testUtils"),userUtils_1=require("./userUtils");jest.setTimeout(25e3),describe("deleteLoginByEmail",(()=>{async function deleteWithEmail(){const{email:email,password:password,user:user}=await(0,testUtils_1.getValidTemporaryCredentials)();await(0,loginUtils_1.deleteLoginByEmail)(email),await(0,testUtils_1.removeLoginRelationalTables)(user);const result=(0,loginUtils_1.loginWithPassword)(email,password);await expect(result).rejects.toBeDefined()}async function noEmail(){let email,result;email="",result=(0,loginUtils_1.deleteLoginByEmail)(email),await expect(result).rejects.toBeDefined(),email=void 0,result=(0,loginUtils_1.deleteLoginByEmail)(email),await expect(result).rejects.toBeDefined(),email=null,result=(0,loginUtils_1.deleteLoginByEmail)(email),await expect(result).rejects.toBeDefined()}async function invalidEmail(){let invalidEmail,result;invalidEmail={},result=(0,loginUtils_1.deleteLoginByEmail)(invalidEmail),await expect(result).rejects.toBeDefined(),invalidEmail=[],result=(0,loginUtils_1.deleteLoginByEmail)(invalidEmail),await expect(result).rejects.toBeDefined(),invalidEmail={email:"correct@email.com"},result=(0,loginUtils_1.deleteLoginByEmail)(invalidEmail),await expect(result).rejects.toBeDefined(),invalidEmail=["correct@email.com"],result=(0,loginUtils_1.deleteLoginByEmail)(invalidEmail),await expect(result).rejects.toBeDefined()}test("Given an email, it deletes a login",deleteWithEmail),test("Given no email, it throws an error",noEmail),test("Given invalid email, it throws an error",invalidEmail)})),describe("getUserIdByPassword",(()=>{async function correctEmailPassword(){const{email:email,password:password}=await(0,testUtils_1.getValidCredentials)(),userId=await(0,loginUtils_1.getUserIdByPassword)(email,password);expect(userId).toBeDefined()}async function noEmail(){const{password:password}=await(0,testUtils_1.getValidCredentials)();let email,result;email="",result=(0,loginUtils_1.getUserIdByPassword)(email,password),await expect(result).rejects.toBeDefined(),email=void 0,result=(0,loginUtils_1.getUserIdByPassword)(email,password),await expect(result).rejects.toBeDefined(),email=null,result=(0,loginUtils_1.getUserIdByPassword)(email,password),await expect(result).rejects.toBeDefined()}async function noPassword(){const{email:email}=await(0,testUtils_1.getValidCredentials)();let password,result;password="",result=(0,loginUtils_1.getUserIdByPassword)(email,password),await expect(result).rejects.toBeDefined(),password=void 0,result=(0,loginUtils_1.getUserIdByPassword)(email,password),await expect(result).rejects.toBeDefined(),password=null,result=(0,loginUtils_1.getUserIdByPassword)(email,password),await expect(result).rejects.toBeDefined()}async function wrongEmailPassword(){let email,password,result;email="wrong@email.com",password="correct password",result=await(0,loginUtils_1.getUserIdByPassword)(email,password),expect(result).toBeFalsy(),email="correct@email.com",password="wrong password",result=await(0,loginUtils_1.getUserIdByPassword)(email,password),expect(result).toBeFalsy()}async function objectPassword(){const{email:email}=await(0,testUtils_1.getValidCredentials)();let password,result;password={},result=(0,loginUtils_1.getUserIdByPassword)(email,password),await expect(result).rejects.toBeDefined(),password=[],result=(0,loginUtils_1.getUserIdByPassword)(email,password),await expect(result).rejects.toBeDefined(),password={password:"correct password"},result=(0,loginUtils_1.getUserIdByPassword)(email,password),await expect(result).rejects.toBeDefined(),password=["correct password"],result=(0,loginUtils_1.getUserIdByPassword)(email,password),await expect(result).rejects.toBeDefined()}async function objectEmail(){const{password:password}=await(0,testUtils_1.getValidCredentials)();let email,result;email={},result=(0,loginUtils_1.getUserIdByPassword)(email,password),await expect(result).rejects.toBeDefined(),email=[],result=(0,loginUtils_1.getUserIdByPassword)(email,password),await expect(result).rejects.toBeDefined(),email={email:"correct@email.com"},result=(0,loginUtils_1.getUserIdByPassword)(email,password),await expect(result).rejects.toBeDefined(),email=["correct@email.com"],result=(0,loginUtils_1.getUserIdByPassword)(email,password),await expect(result).rejects.toBeDefined()}test("Given correct email and password, it returns user id",correctEmailPassword),test("Given wrong email and password, it returns nothing",wrongEmailPassword),test("Given no email, it throws error",noEmail),test("Given no password, it throws error",noPassword),test("Given object email, it throws error",objectEmail),test("Given object password, it throws error",objectPassword)})),describe("createLoginByPassword",(()=>{test("Given an available email and password, it creates a login",(async()=>{const{email:email,password:password}=await(0,testUtils_1.getUnusedCredentials)(),user=await(0,userUtils_1.createUserByEmail)(email);await(0,loginUtils_1.createLoginByPassword)(email,password,user);const result=await(0,loginUtils_1.getUserIdByPassword)(email,password);expect(result).toBe(user.id)}))})),describe("loginWithPassword",(()=>{test("Given correct email and password, it returns a user and token",(async()=>{const{email:email,password:password}=await(0,testUtils_1.getValidCredentials)(),{user:user,token:token}=await(0,loginUtils_1.loginWithPassword)(email,password);expect(user.email).toBe(email),expect(token).toBeDefined()}))})),describe("loginWithToken",(()=>{test("Given correct email and token, it returns a user",(async()=>{const{email:email,token:token}=await(0,testUtils_1.getValidCredentials)(),user=await(0,loginUtils_1.loginWithToken)(email,token);expect(user.email).toBe(email)}))}));