"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const httpCodes_1=__importDefault(require("../utils/httpCodes")),database_1=require("../models/database"),nodeUtils_1=require("../utils/nodeUtils"),utilityFunctions_1=require("../utils/utilityFunctions"),Login_1=__importDefault(require("../models/entities/Login")),authenticate={cart:cart,password:password,token:token,email:email,itemsTable:itemsTable};async function cart(cart,user){const cartId=Number(null==cart?void 0:cart.id);if(!cartId||!cart.itemsTable)throw new Error("ERROR: invalid cart id");const userID=undefined;if(cartId!==await authenticate.token(user.email,user.token)){const error=new Error("ERROR: forbidden access to cart");throw error.code=httpCodes_1.default.error.forbiddenUser,error}}async function password(email,password){var _a;if(!email||!password){const error=new Error("ERROR: email and password must be provided");throw error.code=httpCodes_1.default.error.unauthenticated,error}const emailHash=undefined,passwordHash=undefined,columnsMatchValues={emailHash:(0,nodeUtils_1.hash)(email),passwordHash:(0,nodeUtils_1.hash)(password)},data=await database_1.typeorm.manager.getRepository(Login_1.default).findOne({where:columnsMatchValues,relations:{user:!0}}),userID=null===(_a=null==data?void 0:data.user)||void 0===_a?void 0:_a.id,token=null==data?void 0:data.token;if(!userID){const error=new Error("ERROR: Incorrect email or password");throw error.code=httpCodes_1.default.error.unauthenticated,error}return{userID:userID,token:token}}async function token(email,token){var _a;if((0,utilityFunctions_1.isEmpty)(email)||(0,utilityFunctions_1.isEmpty)(token)){const error=new Error("ERROR: incorrect email or token");throw error.code=httpCodes_1.default.error.unauthenticated,error}const emailHash=(0,nodeUtils_1.hash)(email);if(!emailHash){const error=new Error("ERROR: Invalid email or token");throw error.code=httpCodes_1.default.error.unauthenticated,error}const columnsMatchValues={emailHash:emailHash,token:token},data=await database_1.typeorm.manager.getRepository(Login_1.default).findOne({where:columnsMatchValues,relations:{user:!0}}),userID=null===(_a=null==data?void 0:data.user)||void 0===_a?void 0:_a.id;if(!userID){const error=new Error("ERROR: Invalid email or token");throw error.code=httpCodes_1.default.error.unauthenticated,error}return userID}async function email(email){const hashedEmail=(0,nodeUtils_1.hash)(email),authenticateEmailHash=emailHash;await authenticateEmailHash(hashedEmail)}async function emailHash(emailHash){const columnsMatchValues={emailHash:emailHash},data=await database_1.typeorm.manager.getRepository(Login_1.default).findOne({where:columnsMatchValues});if((0,utilityFunctions_1.isEmpty)(data)){const error=new Error("ERROR: Account does not exist");throw error.code=httpCodes_1.default.error.unauthenticated,error}return"Email validated"}async function itemsTable(tableId){const hashedEmail=tableId,authenticateEmailHash=emailHash;await authenticateEmailHash(hashedEmail)}exports.default=authenticate;