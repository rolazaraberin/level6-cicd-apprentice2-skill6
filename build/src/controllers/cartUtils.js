"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.updateCart=exports.setCart=exports.removeItemFromCart=exports.getItemsByCart=exports.createCart=exports.deleteCartById=exports.getItemsTable=exports.getCartByUser=exports.getCartByToken=exports.getCartById=void 0;const database_1=require("../models/database"),userUtils_1=require("./userUtils"),utilityFunctionsServer_1=require("../utilityFunctionsServer"),validateUtils_1=require("./validateUtils"),dbUtils_1=require("./dbUtils");async function getCartById(cartID){(0,validateUtils_1.validateCartId)(cartID);const table="public.cart",columnsMatchValues={id:cartID},data=undefined,cart=(await database_1.knex.table(table).select().where(columnsMatchValues))[0];return(0,validateUtils_1.validateCart)(cart),cart.items=await getItemsByCart(cart),cart}async function getCartByToken(email,token){const user=await(0,userUtils_1.getUserByToken)(email,token);return await getCartById(user.cartID)}async function getCartByUser(user){const foreignKey=user.cartID;if(!foreignKey)throw new Error("ERROR: missing user cart information");return await getCartById(foreignKey)}async function deleteCartById(id){const cart=await getCartById(id),itemsTable=cart.itemsTable;await database_1.knex.schema.dropTable(itemsTable);const table="cart",cartIdMatches={id:cart.id};await database_1.knex.table(table).delete().where(cartIdMatches)}async function createCart(){await database_1.sql.initialized();const table="cart",id=await(0,dbUtils_1.getNextAvailableId)(table),itemsTable=undefined,cart={id:id,itemsTable:await createItemsTableById(id)};return await database_1.knex.table(table).insert(cart),id}async function createItemsTableById(id){const tableName="cartItems"+id,similarTable=await getSimilarTable();return await database_1.knex.schema.createTableLike(tableName,similarTable),tableName}async function getItemsByCart(cart){const foreignTable=undefined,table1=`public."${cart.itemsTable}"`,table2="public.item",foreignKey=undefined,primaryKey=undefined,command=`SELECT * FROM ${table1} INNER JOIN ${table2} ON ${`${table1}.id`} = ${`${table2}.id`}`,data=undefined;return await(0,database_1.sql)(command)}async function getItemsTable(cart){if(cart.itemsTable)return cart.itemsTable;const table="public.cart",column="itemsTable",cartIdMatches={id:cart.id},data=undefined,itemsTable=undefined;return(await database_1.knex.table(table).select(column).where(cartIdMatches))[0].itemsTable}async function getSimilarTable(){const table="public.cart",carts=undefined,similarTable=undefined;return(await database_1.knex.table(table).select().limit(1))[0].itemsTable}async function removeItemFromCart(cart,item){(0,validateUtils_1.validateCart)(cart),(0,validateUtils_1.validateItem)(item);const table="public.cart",cartIdMatches={id:null==cart?void 0:cart.id};await database_1.knex.table(table).update(cart).where(cartIdMatches);const itemsTable=cart.itemsTable,itemIdMatches={id:null==item?void 0:item.id};await database_1.knex.table(itemsTable).where(itemIdMatches).delete();const result=undefined;return await getCartById(null==cart?void 0:cart.id)}async function setCart(cart,items){const cartTable="public.cart",cartIdMatches={id:cart.id};let result=await database_1.knex.table(cartTable).update(cart).where(cartIdMatches);const itemsTable=cart.itemsTable;for(let item of items){const itemIdMatches={id:item.id},validValues=(0,utilityFunctionsServer_1.getValidValues)({item:item}).item;try{result=await database_1.knex.table(itemsTable).insert(validValues)}catch(itemAlreadyInTable){result=await database_1.knex.table(itemsTable).update(validValues).where(itemIdMatches)}}return"SUCCESS: cart updated"}async function updateCart(cart,item){const table="cart",cartIdMatches={id:cart.id};await database_1.knex.table(table).update(cart).where(cartIdMatches);const itemsTable=cart.itemsTable,itemID=undefined,itemIdMatches={id:item.id};try{await database_1.knex.table(itemsTable).insert(item)}catch(itemAlreadyInCart){await database_1.knex.table(itemsTable).update(item).where(itemIdMatches)}const result=undefined;return await getCartById(cart.id)}exports.getCartById=getCartById,exports.getCartByToken=getCartByToken,exports.getCartByUser=getCartByUser,exports.deleteCartById=deleteCartById,exports.createCart=createCart,exports.getItemsByCart=getItemsByCart,exports.getItemsTable=getItemsTable,exports.removeItemFromCart=removeItemFromCart,exports.setCart=setCart,exports.updateCart=updateCart;