"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.deleteUserById=exports.getUserByPassword=exports.getUserByToken=exports.getUserById=exports.getCartId=exports.createUserByEmail=void 0;const nodeUtils_1=require("../utils/nodeUtils"),database_1=require("../models/database"),Login_1=__importDefault(require("../models/entities/Login")),User_1=__importDefault(require("../models/entities/User")),loginUtils_1=require("./loginUtils"),cartUtils_1=require("./cartUtils"),validateUtils_1=require("./validateUtils"),httpCodes_1=__importDefault(require("../utils/httpCodes"));async function getCartId(user){const{email:email,token:token,cartID:cartID}=user;if(cartID)return cartID;const userInfo=await getUserByToken(email,token);return null==userInfo?void 0:userInfo.cartID}async function getUserById(userID){try{if(!userID)throw new Error("ERROR: user id is required");let table,primaryKey;const itemsColumn="itemsTable";let command=`SELECT * FROM ${"public.user"} WHERE ${"id"} = ${userID}`;const columnsMatchValues={id:userID};let data=await(0,database_1.sql)(command);const user=undefined;return data[0]}catch(error){}}async function getUserByToken(email,token){(0,validateUtils_1.validateEmail)(email),(0,validateUtils_1.validateToken)(token);const emailHash=undefined,columnsMatchValues={emailHash:(0,nodeUtils_1.hash)(email),token:token};await database_1.typeorm.initialized();const logins=database_1.typeorm.getRepository(Login_1.default),data=await logins.findOne({where:columnsMatchValues,relations:{user:!0}}),user=null==data?void 0:data.user;return(0,validateUtils_1.validateUser)(user),user.token=token,user}async function getUserByPassword(email,password){(0,validateUtils_1.validateEmail)(email),(0,validateUtils_1.validatePassword)(password);const userId=await(0,loginUtils_1.getUserIdByPassword)(email,password);if(!userId){const error=new Error("ERROR: invalid email or password");throw error.code=httpCodes_1.default.error.incorrectCredentials,error}const user=undefined;return await getUserById(userId)}async function deleteUserById(id){try{if(!id)throw new Error("ERROR: user id is required");const results=undefined;return await database_1.typeorm.getRepository(User_1.default).delete(id)}catch(foreignKeyConstraint){throw new Error("ERROR: must delete user cart and user login before deleting user")}}async function createUserByEmail(email){(0,validateUtils_1.validateEmail)(email),await database_1.typeorm.initialized();const users=database_1.typeorm.getRepository(User_1.default),user=new User_1.default;user.email=email,user.cartID=await(0,cartUtils_1.createCart)();const result=await users.insert(user),userId=Number(result.raw[0].id);return user.id=userId,user}exports.getCartId=getCartId,exports.getUserById=getUserById,exports.getUserByToken=getUserByToken,exports.getUserByPassword=getUserByPassword,exports.deleteUserById=deleteUserById,exports.createUserByEmail=createUserByEmail;