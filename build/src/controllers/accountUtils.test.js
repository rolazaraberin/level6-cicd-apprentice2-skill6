"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const accountUtils_1=require("./accountUtils"),cartUtils_1=require("./cartUtils"),loginUtils_1=require("./loginUtils"),userUtils_1=require("./userUtils"),testUtils_1=require("./testUtils");jest.setTimeout(25e4),describe("getAccountByToken",(()=>{async function getByToken(){const{email:email,token:token}=await(0,testUtils_1.getValidCredentials)(),account=await(0,accountUtils_1.getAccountByToken)(email,token);expect(account.email).toBe(email)}async function getByWrongToken(){const wrongEmail="wrong@email.com",wrongToken="WRONG-TOKEN",result=(0,accountUtils_1.getAccountByToken)(wrongEmail,wrongToken);await expect(result).rejects.toBeDefined()}async function getByNoEmail(){const{token:token}=await(0,testUtils_1.getValidCredentials)();let noEmail,result;noEmail="",result=(0,accountUtils_1.getAccountByToken)(noEmail,token),await expect(result).rejects.toBeDefined(),noEmail={},result=(0,accountUtils_1.getAccountByToken)(noEmail,token),await expect(result).rejects.toBeDefined(),noEmail=[],result=(0,accountUtils_1.getAccountByToken)(noEmail,token),await expect(result).rejects.toBeDefined(),noEmail=void 0,result=(0,accountUtils_1.getAccountByToken)(noEmail,token),await expect(result).rejects.toBeDefined(),noEmail=null,result=(0,accountUtils_1.getAccountByToken)(noEmail,token),await expect(result).rejects.toBeDefined()}async function getByNoToken(){const{email:email}=await(0,testUtils_1.getValidCredentials)();let noToken,result;noToken="",result=(0,accountUtils_1.getAccountByToken)(email,noToken),await expect(result).rejects.toBeDefined(),noToken={},result=(0,accountUtils_1.getAccountByToken)(email,noToken),await expect(result).rejects.toBeDefined(),noToken=[],result=(0,accountUtils_1.getAccountByToken)(email,noToken),await expect(result).rejects.toBeDefined(),noToken=void 0,result=(0,accountUtils_1.getAccountByToken)(email,noToken),await expect(result).rejects.toBeDefined(),noToken=null,result=(0,accountUtils_1.getAccountByToken)(email,noToken),await expect(result).rejects.toBeDefined()}test("Given an email and token, it fetches account info",getByToken),test("Given incorrect email and token, it returns error",getByWrongToken),test("Given no email, it returns error",getByNoEmail),test("Given no token, it returns error",getByNoToken)})),describe("createAccountByPassword",(()=>{async function newAccount(){const{email:email,password:password}=await(0,testUtils_1.getUnusedCredentials)(),{user:user}=await(0,accountUtils_1.createAccountByPassword)(email,password),cart=await(0,cartUtils_1.getCartById)(user.cartID),cartID=Number(cart.id),result=(0,loginUtils_1.loginWithPassword)(email,password);expect(user.email).toBe(email),expect(cartID).toBe(user.cartID),await expect(result).resolves.toBeDefined()}test("Given a new email and password, it creates an account",newAccount)})),describe("deleteAccountByPassword",(()=>{async function deleteByPassword(){let result;const{email:email,password:password,cartID:cartID}=await(0,testUtils_1.getValidTemporaryCredentials)();await(0,accountUtils_1.deleteAccountByPassword)(email,password),result=(0,userUtils_1.getUserByPassword)(email,password),await expect(result).rejects.toBeDefined(),result=(0,cartUtils_1.getCartById)(cartID),await expect(result).rejects.toBeDefined(),result=(0,loginUtils_1.loginWithPassword)(email,password),await expect(result).rejects.toBeDefined()}async function wrongDelete(){let email,password,result;email="wrong@email.com",password="correct password",result=(0,accountUtils_1.deleteAccountByPassword)(email,password),await expect(result).rejects.toBeDefined(),email="correct@email.com",password="wrong password",result=(0,accountUtils_1.deleteAccountByPassword)(email,password),await expect(result).rejects.toBeDefined(),email="wrong@email.com",password="wrong password",result=(0,accountUtils_1.deleteAccountByPassword)(email,password),await expect(result).rejects.toBeDefined()}test("Given an email and password, it deletes all account info",deleteByPassword),test("Given incorrect email and password, it returns error",wrongDelete)}));