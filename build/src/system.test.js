"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const axios_1=__importDefault(require("axios")),router_1=require("./routes/router"),cartUtils_1=require("./controllers/cartUtils"),userUtils_1=require("./controllers/userUtils"),testUtils_1=require("./controllers/testUtils");async function testPutCartError(){const{user:user}=await(0,testUtils_1.getValidCredentials)(),data={cart:{},item:{},user:user},request=axios_1.default.put(router_1.fullUrl.cart,data);await expect(request).rejects.toThrow()}async function testPutCartSuccess(){const{email:email,token:token}=await(0,testUtils_1.getValidCredentials)(),cart=await(0,cartUtils_1.getCartByToken)(email,token),{item:item,startingQuantity:startingQuantity}=getItemToPutInCart(cart),user=undefined,data={cart:cart,item:item,user:await(0,userUtils_1.getUserByToken)(email,token)},result=await axios_1.default.put(router_1.fullUrl.cart,data),originalCartId=Number(cart.id),updatedCart=result.data,resultId=Number(updatedCart.id),newQuantity=Number(updatedCart.items[0].quantity);expect(resultId).toBe(originalCartId),expect(newQuantity).toBe(startingQuantity+1)}async function testDeleteItemError(){const{user:user}=await(0,testUtils_1.getValidCredentials)(),data={data:{cart:{},item:{},user:user}},request=axios_1.default.delete(router_1.fullUrl.cart,data);await expect(request).rejects.toThrow()}async function testDeleteItemSuccess(){var _a;const{email:email,token:token,user:user}=await(0,testUtils_1.getValidCredentials)(),cart=await(0,cartUtils_1.getCartByToken)(email,token);let item=cart.items[0];item||(item=await addItemToCart(cart,user));const data={data:{cart:cart,item:item,user:user}},result=await axios_1.default.delete(router_1.fullUrl.cart,data),originalCartId=cart.id,originalItemId=item.id,updatedCart=result.data,resultId=updatedCart.id,resultItemId=null===(_a=updatedCart.items[0])||void 0===_a?void 0:_a.id;expect(resultId).toBe(originalCartId),expect(resultItemId).not.toBe(originalItemId)}async function addItemToCart(cart,user){const item=undefined,data={cart:cart,item:{id:2,quantity:1},user:user},result=undefined,updatedCart=(await axios_1.default.put(router_1.fullUrl.cart,data)).data,resultItem=null==updatedCart?void 0:updatedCart.items[0];return expect(resultItem).toBeDefined(),resultItem}function getItemToPutInCart(cart){let item=cart.items[0];item||(item={id:3,itemID:3,quantity:0});const startingQuantity=Number(item.quantity);return item.quantity=startingQuantity+1,{item:item,startingQuantity:startingQuantity}}jest.setTimeout(25e4),describe("Backend server",(()=>{test("Given invalid cart PUT request, it should return error",testPutCartError),test("Given valid cart PUT request, it should return success",testPutCartSuccess),test("Given invalid cart DELETE request, it should return error",testDeleteItemError),test("Given valid cart DELETE request, it should return success",testDeleteItemSuccess)}));