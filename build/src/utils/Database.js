"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});const better_sqlite3_1=__importDefault(require("better-sqlite3")),mysql_1=__importDefault(require("mysql")),knex_1=__importDefault(require("knex")),fs_1=__importDefault(require("fs"));class Database{constructor(knex,mysql,sqlite,typeorm,sql){this.knex=knex,this.mysql=mysql,this.sqlite=sqlite,this.typeorm=typeorm,this.sql=sql}configureKnex(knexfileConfig){if(!knexfileConfig)throw new Error(`ERROR: knexfile is required PROCESS ${process.env.mode}`);const knex=(0,knex_1.default)(knexfileConfig);this.knex=knex}configureMysql(mysqlConfig){const mysql=mysql_1.default.createConnection({host:mysqlConfig.host,user:mysqlConfig.user,password:mysqlConfig.password});this.mysql=mysql}configureTypeorm(appDataSource){if(!appDataSource)throw new Error("ERROR: AppDataSource is required");this.typeorm=appDataSource,this.typeorm.initialize(),this.typeorm.initialized=async function(){return this.typeorm.isInitialized?void 0:await this.typeorm.initialize()}.bind(this)}configureSqlite(cwd,filename){if(!cwd)throw new Error("ERROR: current working directory is required");if(!filename)throw new Error("ERROR: filename is required");this.sqlite=new better_sqlite3_1.default(cwd+"/"+filename),this.sqlite.cwd=cwd}configureSqlKnex(){if(!this.knex)throw new Error("ERROR: knex must be configured");this.sql=this.sqlKnex.bind(this)}configureSqlMysql(){if(!this.typeorm)throw new Error("ERROR: mysql must be configured");this.sql=this.sqlMysql.bind(this)}configureSqlTypeorm(){if(!this.typeorm)throw new Error("ERROR: typeorm must be configured");this.sql=this.sqlTypeorm.bind(this),this.sql.initialized=async function(){this.typeorm.isInitialized||await this.typeorm.initialize()}.bind(this)}async sqlKnex(sqlCommand,parameters){const results=undefined;return(await this.knex.raw(sqlCommand,parameters))[0]}async sqlTypeorm(sqlCommand,parameters){const results=undefined;return await this.typeorm.query(sqlCommand,parameters)}async sqlSqlite(sqlCommand,label=""){const results=this.sqlite.prepare(sqlCommand).all();return console.log(label,"\n",results,"\n"),results}async sqlSqliteFile(filename,cwd=this.sqlite.cwd){if(!cwd)throw new Error("ERROR: sqlite is not configured");const SQLcommands=fs_1.default.readFileSync(cwd+"/"+filename);this.sqlite.exec(SQLcommands.toString())}async sqlMysql(sqlCommand,parameters){return this.mysql.raw(sqlCommand,parameters)}}exports.default=Database;